Rolling hashes are amazing, they provide you an ability to calculate the hash values without rehashing the whole string.

Consider this example. Lets say you have a string "abcdeacdoe" & you want to find pattern "bcd" in this string.

Now with naive way, you will try to compare each character of pattern ("bcd") with the string characters ("abcdbbca") forming three character strings. This might be really inefficient specially as the input gets larger. If you use rolling hash, you can do this intelligently.

First you calculate the hash of first three letter substring (abc) in string. To keep matters simple, lets say we use base 7 for this calculation (in actual scenario we should mod it with a prime to avoid overflow):

substring1 = a*7^0+ b*7^1+c*7^2=97*1+98*7+99*49=5634
pattern = b*7^0+ c*7^1+d*7^2=98*1+99*7+100*49=5691

So you compare two hash values and since they are different, you move forward. Now you reach to second substring "bcd" in string. Here is where the fun begins. We can calculate the hash of this string without rehashing everything. As you can see, the window has moved forward only by dropping one character and adding another:
a<- bc<-d


From hash value we drop the first character value, divide the left out value with the base number and add the new char to the rightmost position with appropriate power of base: Here are the steps:

drop a => (a*7^0+ b*7^1+c*7^2) - a*7^0
divide everything by 7 => (b*7^1+c*7^2)/7 => b*7^0 + c*7^1
add d => b*7^0 + c*7^1 + d*7^2 [the power of base for d is (pattern-length-1)]

Thus new hash for "bcd" in input string would be => (5634 - 97)/7+ 100*49 = 5691 which matches pattern hash value. Now we can go ahead and compare the strings to verify if they are in fact same.

Visualize doing this for a large string which comprising of lets say, 30 lines. You will be able to get new hash value in constant time without much effort by just dropping and adding new character(s).

In real use cases, to avoid overflow because of large power, we will have to do modulo with large prime. This technique is often used for multi-pattern string search and forms the core of algorithm like Karp-Rabin algorithm. This algorithm is an excellent choice to detect plagiarism.



Consider there is a String S of size k+1 from c1…ck+1

Hash(H1) over k characters(c1..ck) could be computed as follows:
H1= c1*a^k-1 + c2*a^k-2+c3*a^k-3+…+ck*a^0
where a is a constant
and c1…ck are input characters.

Lets assume you want to calculate the hash(H2) over same size window k over characters(c2..ck+1) could be computed from similar logic above as follows:
H2 = c2*a^k-1+c3*a^k-2+…+ck+1*a^0
where a is a constant
and c2..ck+1 are input characters.

Now, if we look carefully, H2 = [H1*a] + [ck+1*a^0(i.e. last term of this window)] - [c1*a^k-1(i.e. first term of H1)]

So, in effect, whenever we are calculating rolling hash, we don't have to fully compute the hash. We can leverage the previously calculated hash and then it involved multiplying by a, subtracting the first term of last hash and adding the last character of this next window.

Similarly, whenever you compute rolling hash functions where either you shift the window right or left doesn't involve computing the whole hash function, but requires either multiplication or division by constant and subtraction/addition of last/first term.

